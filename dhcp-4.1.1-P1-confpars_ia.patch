diff -up dhcp-4.1.1-P1/server/confpars.c.confpars_ia dhcp-4.1.1-P1/server/confpars.c
--- dhcp-4.1.1-P1/server/confpars.c.confpars_ia	2011-01-27 12:25:05.119199578 +0100
+++ dhcp-4.1.1-P1/server/confpars.c	2011-01-27 12:33:24.813197473 +0100
@@ -4307,6 +4307,21 @@ parse_ia_na_declaration(struct parse *cf
 					continue;
 				}
 				prefer = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Lease valid lifetime. */
@@ -4320,6 +4335,21 @@ parse_ia_na_declaration(struct parse *cf
 					continue;
 				}
 				valid = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Lease expiration time. */
@@ -4640,6 +4670,21 @@ parse_ia_ta_declaration(struct parse *cf
 					continue;
 				}
 				prefer = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Lease valid lifetime. */
@@ -4653,6 +4698,21 @@ parse_ia_ta_declaration(struct parse *cf
 					continue;
 				}
 				valid = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Lease expiration time. */
@@ -4974,6 +5034,21 @@ parse_ia_pd_declaration(struct parse *cf
 					continue;
 				}
 				prefer = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Lease valid lifetime. */
@@ -4987,6 +5062,21 @@ parse_ia_pd_declaration(struct parse *cf
 					continue;
 				}
 				valid = atoi (val);
+
+				/*
+				 * Currently we peek for the semi-colon to 
+				 * allow processing of older lease files that
+				 * don't have the semi-colon.  Eventually we
+				 * should remove the peeking code.
+				 */
+				token = peek_token(&val, NULL, cfile);
+				if (token == SEMI) {
+					token = next_token(&val, NULL, cfile);
+				} else {
+					parse_warn(cfile,
+						   "corrupt lease file; "
+						   "expecting semicolon.");
+				}
 				break;
 
 				/* Prefix expiration time. */
diff -up dhcp-4.1.1-P1/server/db.c.confpars_ia dhcp-4.1.1-P1/server/db.c
--- dhcp-4.1.1-P1/server/db.c.confpars_ia	2011-01-27 12:34:27.690211883 +0100
+++ dhcp-4.1.1-P1/server/db.c	2011-01-27 12:35:46.030190596 +0100
@@ -580,11 +580,11 @@ write_ia(const struct ia_xx *ia) {
 			    binding_state) < 0) {
 			goto error_exit;
 		}
-		if (fprintf(db_file, "    preferred-life %u\n",
+		if (fprintf(db_file, "    preferred-life %u;\n",
 			    (unsigned)iasubopt->prefer) < 0) {
 			goto error_exit;
 		}
-		if (fprintf(db_file, "    max-life %u\n",
+		if (fprintf(db_file, "    max-life %u;\n",
 			    (unsigned)iasubopt->valid) < 0) {
 			goto error_exit;
 		}
