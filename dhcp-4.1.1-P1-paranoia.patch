--- dhcp-4.1.1-P1/client/dhclient.c.paranoia	2014-02-19 16:53:20.553495677 -0500
+++ dhcp-4.1.1-P1/client/dhclient.c	2014-02-19 16:54:58.578488835 -0500
@@ -1760,11 +1760,6 @@ int write_host (host)
 	return 0;
 }
 
-void db_startup (testp)
-	int testp;
-{
-}
-
 void bootp (packet)
 	struct packet *packet;
 {
--- dhcp-4.1.1-P1/includes/dhcpd.h.paranoia	2014-02-19 16:57:56.871552512 -0500
+++ dhcp-4.1.1-P1/includes/dhcpd.h	2014-02-19 17:00:37.901499773 -0500
@@ -2635,7 +2635,11 @@ int write_billing_class PROTO ((struct c
 void commit_leases_readerdry(void *);
 int commit_leases PROTO ((void));
 int commit_leases_timed (void);
+#if defined (PARANOIA)
+void db_startup (int, uid_t, gid_t);
+#else
 void db_startup PROTO ((int));
+#endif /* PARANOIA */
 int new_lease_file PROTO ((void));
 int group_writer (struct group_object *);
 int write_ia(const struct ia_xx *);
--- dhcp-4.1.1-P1/server/confpars.c.paranoia	2014-02-19 17:02:15.915505962 -0500
+++ dhcp-4.1.1-P1/server/confpars.c	2014-02-19 17:05:18.008463186 -0500
@@ -224,7 +224,11 @@ void trace_conf_input (trace_type_t *tty
 	}
 
 	if (!leaseconf_initialized && ttype == trace_readleases_type) {
+#if defined (PARANOIA)
+        db_startup (0, 0, 0);
+#else
 		db_startup (0);
+#endif /* PARANOIA */
 		leaseconf_initialized = 1;
 		postdb_startup ();
 	}
--- dhcp-4.1.1-P1/server/db.c.paranoia	2014-02-19 17:06:41.262530102 -0500
+++ dhcp-4.1.1-P1/server/db.c	2014-02-19 17:13:14.948500476 -0500
@@ -47,6 +47,10 @@ static int counting = 0;
 static int count = 0;
 TIME write_time;
 int lease_file_is_corrupt = 0;
+#if defined (PARANOIA)
+uid_t global_set_uid = 0;
+gid_t global_set_gid = 0;
+#endif /* PARANOIA */
 
 /* Write a single binding scope value in parsable format.
  */
@@ -1014,8 +1018,11 @@ int commit_leases ()
 	return (1);
 }
 
-void db_startup (testp)
-	int testp;
+#if defined (PARANOIA)
+void db_startup (int testp, uid_t set_uid, gid_t set_gid)
+#else
+void db_startup (int testp)
+#endif /* PARANOIA */
 {
 	isc_result_t status;
 
@@ -1030,6 +1037,11 @@ void db_startup (testp)
 	}
 #endif
 
+#if defined (PARANOIA)
+   global_set_uid = set_uid;
+   global_set_gid = set_gid;
+#endif /* PARANOIA */
+
 #if defined (TRACING)
 	/* If we're playing back, there is no lease file, so we can't
 	   append it, so we create one immediately (maybe this isn't
@@ -1092,6 +1104,17 @@ int new_lease_file ()
 		log_error ("Can't create new lease file: %m");
 		return 0;
 	}
+
+#if defined (PARANOIA)
+    if (global_set_uid && !geteuid() &&
+        global_set_gid && !getegid())
+        if (fchown(db_fd, global_set_uid, global_set_gid)) {
+            log_fatal ("Can't chown new lease file: %m");
+            close(db_fd);
+            goto fdfail;
+    }
+#endif /* PARANOIA */
+
 	if ((new_db_file = fdopen(db_fd, "we")) == NULL) {
 		log_error("Can't fdopen new lease file: %m");
 		close(db_fd);
--- dhcp-4.1.1-P1/server/dhcpd.c.paranoia	2014-02-19 17:22:45.981513677 -0500
+++ dhcp-4.1.1-P1/server/dhcpd.c	2014-02-19 17:23:55.899492529 -0500
@@ -684,7 +684,11 @@ main(int argc, char **argv) {
 	group_write_hook = group_writer;
 
 	/* Start up the database... */
+#if defined (PARANOIA)
+    db_startup (lftest, set_uid, set_gid);
+#else
 	db_startup (lftest);
+#endif /* PARANOIA */
 
 	if (lftest)
 		exit (0);
@@ -755,22 +755,6 @@ main(int argc, char **argv) {
 			exit (0);
 	}
  
-#if defined (PARANOIA)
-	/* change uid to the specified one */
-
-	if (set_gid) {
-		if (setgroups (0, (void *)0))
-			log_fatal ("setgroups: %m");
-		if (setgid (set_gid))
-			log_fatal ("setgid(%d): %m", (int) set_gid);
-	}	
-
-	if (set_uid) {
-		if (setuid (set_uid))
-			log_fatal ("setuid(%d): %m", (int) set_uid);
-	}
-#endif /* PARANOIA */
-
 	/* Read previous pid file. */
 	if ((i = open (path_dhcpd_pid, O_RDONLY | O_CLOEXEC)) >= 0) {
 		status = read(i, pbuf, (sizeof pbuf) - 1);
@@ -798,6 +782,21 @@ main(int argc, char **argv) {
                 log_error("Can't create PID file %s: %m.", path_dhcpd_pid);
         }
 
+#if defined (PARANOIA)
+	/* change uid to the specified one */
+
+	if (set_gid) {
+		if (setgroups (0, (void *)0))
+			log_fatal ("setgroups: %m");
+		if (setgid (set_gid))
+			log_fatal ("setgid(%d): %m", (int) set_gid);
+	}	
+
+	if (set_uid) {
+		if (setuid (set_uid))
+			log_fatal ("setuid(%d): %m", (int) set_uid);
+	}
+#endif /* PARANOIA */
 
 	/* If we were requested to log to stdout on the command line,
 	   keep doing so; otherwise, stop. */
diff -up dhcp-4.3.0a1/server/dhcpd.8.paranoia dhcp-4.3.0a1/server/dhcpd.8
--- dhcp-4.3.0a1/server/dhcpd.8.paranoia	2013-12-11 01:01:03.000000000 +0100
+++ dhcp-4.3.0a1/server/dhcpd.8	2013-12-19 16:30:21.413211345 +0100
@@ -79,6 +79,18 @@ dhcpd - Dynamic Host Configuration Proto
 .I trace-output-file
 ]
 [
+.B -user
+.I user
+]
+[
+.B -group
+.I group
+]
+[
+.B -chroot
+.I dir
+]
+[
 .B -play
 .I trace-playback-file
 ]
@@ -268,6 +280,15 @@ lease file.
 To find the version of dhcpd that will run, use the
 .B --version
 argument. Instead of running, the version will be printed.
+.TP
+.BI \-user \ user
+Setuid to user after completing privileged operations, such as creating sockets that listen on privileged ports.
+.TP
+.BI \-group \ group
+Setgid to group after completing privileged operations, such as creating sockets that listen on privileged ports.
+.TP
+.BI \-chroot \ dir
+Chroot to directory after processing the command line arguments, but before reading the configuration file.
 .SH CONFIGURATION
 The syntax of the dhcpd.conf(5) file is discussed separately.   This
 section should be used as an overview of the configuration process,
